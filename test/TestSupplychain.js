const SupplyChain = artifacts.require('SupplyChain')

let instance;
let sku = 1
let upc = 1
let ownerID;
let originFarmerID;
let originFarmName;
let originFarmInformation;
let originFarmLatitude;
let originFarmLongitude;
let productID = sku + upc;
let productNotes;
let productPrice;
let itemState = 0;
let distributorID;
let retailerID;
let consumerID;
let emptyAddress = '0x00000000000000000000000000000000000000';

contract('SupplyChain', (accounts) => {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    ownerID = accounts[0];
    originFarmerID = accounts[1];
    originFarmName = "John Doe";
    originFarmInformation = "Yarray Valley";
    originFarmLatitude = "-38.239770";
    originFarmLongitude = "144.341490";
    productNotes = "Best beans for Espresso";
    productPrice = web3.utils.toWei(".01", "ether");
    distributorID = accounts[2];
    retailerID = accounts[3];
    consumerID = accounts[4];

    console.log("ganache-cli accounts used here...");
    console.log("Contract Owner: accounts[0] ", accounts[0]);
    console.log("Farmer: accounts[1] ", accounts[1]);
    console.log("Distributor: accounts[2] ", accounts[2]);
    console.log("Retailer: accounts[3] ", accounts[3]);
    console.log("Consumer: accounts[4] ", accounts[4]);
});

before(async () => {
    instance = await SupplyChain.deployed();
    instance.addFarmer(originFarmerID, {from: ownerID});
    instance.addDistributor(distributorID, {from: ownerID})
    instance.addRetailer(retailerID, {from: ownerID});
    instance.addConsumer(consumerID, {from: ownerID});
});

it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
    
    // Declare and Initialize a variable for event
    let eventEmitted = false
    
    // Watch the emitted event Harvested()
    await instance.contract.events.Harvested((err, res) => {
        eventEmitted = true
    });

    // Mark an item as Harvested by calling function harvestItem()
    const call =  await instance.harvestItem(upc, 
        originFarmerID, 
        originFarmName, 
        originFarmInformation, 
        originFarmLatitude, 
        originFarmLongitude, 
        productNotes, 
        {from: ownerID});
    
        console.log("TX : " + call.tx);

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
    assert.equal(eventEmitted, true, 'Invalid event emitted')
    assert.isNotNull(call.tx, "tx not found")     
});    

it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {

    // Declare and Initialize a variable for event
    let eventEmitted = false
    
    // Watch the emitted event Processed()
    await instance.contract.events.Processed((err, res) => {
        eventEmitted = true
    });

    // Mark an item as Processed by calling function processtItem()
    await instance.processItem(upc, {from: originFarmerID});
    
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
    assert.equal(eventEmitted, true, 'Invalid event emitted')   
});  

it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
    
    // Declare and Initialize a variable for event
    let eventEmitted = false
    
    // Watch the emitted event Packed()
    await instance.contract.events.Packed((err, res) => {
        eventEmitted = true
    });

    // Mark an item as Packed by calling function packItem()
    await instance.packItem(upc,  {from: originFarmerID});

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
    assert.equal(eventEmitted, true, 'Invalid event emitted')   
});

it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
    
    // Declare and Initialize a variable for event
    let eventEmitted = false
    
    // Watch the emitted event ForSale()
    await instance.contract.events.ForSale((err, res) => {
        eventEmitted = true
    });


    // Mark an item as ForSale by calling function sellItem()
    await instance.sellItem(upc, productPrice,  {from: originFarmerID});

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Product Price does not match')
    assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
    assert.equal(eventEmitted, true, 'Invalid event emitted') 
});

it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
    
    // Declare and Initialize a variable for event
    let eventEmitted = false;
    
    
    // Watch the emitted event Sold()
    await instance.contract.events.Sold((err, res) => {
        eventEmitted = true
    });

    // Mark an item as Sold by calling function buyItem()
    await instance.buyItem(upc, {from: distributorID, value: productPrice});

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Product Price does not match')
    assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid or missing distributorID')
    assert.equal(eventEmitted, true, 'Invalid event emitted') 
});    

it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
    
    // Declare and Initialize a variable for event
    let eventEmitted = false;
    
    // Watch the emitted event Shipped()
    await instance.contract.events.Shipped((err, res) => {
        eventEmitted = true
    });

    // Mark an item as Sold by calling function buyItem()
    await instance.shipItem(upc, {from: distributorID});

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Product Price does not match')
    assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid or missing distributorID')
    assert.equal(eventEmitted, true, 'Invalid event emitted') 
});    

it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
    
    // Declare and Initialize a variable for event
    let eventEmitted = false;
    
    // Watch the emitted event Received()
    await instance.contract.events.Received((err, res) => {
        eventEmitted = true
    });

    // Mark an item as Sold by calling function buyItem()
    await instance.receiveItem(upc, {from: retailerID});

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Product Price does not match')
    assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid or missing distributorID')
    assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid or missing retailerID')
    assert.equal(eventEmitted, true, 'Invalid event emitted') 
});    

it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
    
    // Declare and Initialize a variable for event
    let eventEmitted = false;
    
    // Watch the emitted event Purchased()
    await instance.contract.events.Purchased((err, res) => {
        eventEmitted = true
    });

    // Mark an item as Sold by calling function buyItem()
    await instance.purchaseItem(upc, {from: consumerID});

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Product Price does not match')
    assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid or missing distributorID')
    assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid or missing retailerID')
    assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid or missing consumerID')
    assert.equal(eventEmitted, true, 'Invalid event emitted') 
});   

it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    
    // Verify the result set:
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
});

// 10th Test
it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);
    
    // Verify the result set:
    assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[2], productID, 'Error: Product ID does not match')
    assert.equal(resultBufferTwo[3], productNotes, 'Error: Product Notes does not match')
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Product Price does not match')
    assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid or missing distributorID')
    assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid or missing retailerID')
    assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid or missing consumerID')
});